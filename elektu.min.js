import _ from"lodash";class Colours{constructor(){this.reset()}reset(){this.colour=["#E63AAE","#038FB3","#F9E159","#FE7F00","#C73ADB","#8EC23B","#E6E6E6"]}getNoTeamColour(){return"#C0C0C0"}getRandomColour(){return this.colour.splice(Math.floor(Math.random()*this.colour.length),1)[0]}add(t){this.colour.push(t)}}class PlayerTouch{constructor(t,e,s,i,h){this.radius=20,this.outerCircleStrokeWidth=10,this.x=t,this.y=e,this.id=s,this.colour=i,this.isLocked=!1,this.state=this.touchState.creation,this.number=-1,this.grow=1,this.outerCircleStartAngle=2*Math.random()*Math.PI,this.outerCircleEndAngle=this.outerCircleStartAngle,this.isSelected=!1,this.surroundingCircleRadius=1020,this.step=0,this.timeoutStarted=-1,this.timeoutCircleStartAngle=2*Math.random()*Math.PI,this.timeoutCircleEndAngle=this.timeoutCircleStartAngle,this.timeoutDuration=h,this.timeoutColor=i+"7F"}touchState={creation:0,selected:1,onlySelected:2,normal:3,obsolete:4};moveTo(t,e){this.isLocked||(this.x=t,this.y=e)}computeOuterCircle(){this.outerCircleEndAngle-this.outerCircleStartAngle>=2*Math.PI||this.state===this.touchState.onlySelected||this.state===this.touchState.selected?(this.outerCircleStartAngle=0,this.outerCircleEndAngle=2*Math.PI):(this.outerCircleStartAngle+=.08,this.outerCircleEndAngle+=.24)}update(t){switch(this.state){case this.touchState.creation:40<=this.radius?this.state=this.touchState.normal:this.radius+=5;break;case this.touchState.deletion:this.radius-=5,this.radius<=0&&(this.radius=0,this.state=this.touchState.obsolete),this.timeoutStarted=-1;break;case this.touchState.onlySelected:this.surroundingCircleRadius>this.radius+60&&(this.surroundingCircleRadius-=50),this.timeoutStarted=-1;break;case this.touchState.selected:this.timeoutStarted=-1;break;default:var e;this.step++,4<=this.step&&(this.step=0,this.radius<=37?this.grow=.5:42<=this.radius&&(this.grow=-.5),this.radius+=this.grow),-1!==this.timeoutStarted&&t>this.timeoutStarted&&(e=(t-this.timeoutStarted)/this.timeoutDuration*Math.PI*2,this.timeoutCircleStartAngle+=.04,this.timeoutCircleEndAngle=this.timeoutCircleStartAngle+e)}this.computeOuterCircle()}startTimer(t){this.timeoutStarted=t}drawTouch(t){t.beginPath(),t.arc(this.x,this.y,this.radius,0,2*Math.PI),t.fill(),t.closePath(),t.beginPath(),t.arc(this.x,this.y,this.radius+12,this.outerCircleStartAngle,this.outerCircleEndAngle),t.lineWidth=this.outerCircleStrokeWidth,t.stroke(),t.closePath()}draw(t){this.state!==this.touchState.obsolete&&(t.fillStyle=this.colour,t.strokeStyle=this.colour,this.state===this.touchState.onlySelected&&(t.rect(0,0,t.canvas.clientWidth,t.canvas.clientHeight),t.fill(),t.globalCompositeOperation="xor",t.beginPath(),t.arc(this.x,this.y,this.surroundingCircleRadius,0,2*Math.PI),t.fill(),t.closePath()),this.drawTouch(t),-1!==this.number&&t.fillText(this.number,this.x,this.y-65),-1!==this.timeoutStarted&&(t.strokeStyle=this.timeoutColor,t.beginPath(),t.arc(this.x,this.y,this.radius+4,this.timeoutCircleStartAngle,this.timeoutCircleEndAngle),t.lineWidth=9,t.stroke(),t.closePath()))}flagForDelete(){this.state=this.touchState.deletion,this.id=-1}}class Feature{constructor(){this.featureType={select:0,teams:1,ordinate:2},this.type=this.featureType.select}set(t){switch(t){case"select":this.type=this.featureType.select;break;case"teams":this.type=this.featureType.teams;break;case"ordinate":this.type=this.featureType.ordinate}}shouldTimerStart(t,e){switch(this.type){case this.featureType.select:return e<t;case this.featureType.teams:return e<=t;case this.featureType.ordinate:return 1<t}}}class Elektu{constructor(t){this.colours=new Colours,this.touches=[],this.canvas=t,this.ctx=t.getContext("2d"),this.timerTrigger=-1,this.displayTimeout=1500,this.triggerTimeout=2500,this.finishTouchEnd=this.handleFinishTouchEnd.bind(this),this.touchEnd=this.handleTouchEnd.bind(this),this.newTouch=this.handleNewTouch.bind(this),this.selectedNumber=1,this.vibrate=!1,this.lastUpdateTimestamp=0,this.feature=new Feature,this.canvas.addEventListener("touchstart",this.newTouch),this.canvas.addEventListener("touchend",this.touchEnd),this.canvas.addEventListener("touchmove",this.handleTouchMove.bind(this)),this.canvas.addEventListener("touchcancel",this.touchEnd)}add(t,e,s){var i=this.feature.type===this.feature.featureType.teams?this.colours.getNoTeamColour():this.colours.getRandomColour();this.touches.push(new PlayerTouch(t,e,s,i,this.triggerTimeout))}remove(t){this.getTouch(t)?.flagForDelete()}touchesLength(){let t=0;for(const e of this.touches)e.state!==e.touchState.deletion&&e.state!==e.touchState.obsolete&&++t;return t}setVibrate(t){this.vibrate=t}setSelectedNumber(t){this.selectedNumber=t}areAllTouchesLocked(){for(const t of this.touches)if(!t.isLocked)return!1;return!0}update(t){this.lastUpdateTimestamp=t;for(const e of this.touches)e.update(t);this.touches.forEach((t,e)=>{t.state===t.touchState.obsolete&&(this.feature.type!==this.feature.featureType.teams&&this.colours.add(t.colour),this.touches.splice(e,1))})}move(t,e,s){this.getTouch(t)?.moveTo(e,s)}reset(){this.touches=[],this.colours.reset(),this.ctx.globalCompositeOperation="source-over",clearTimeout(this.timerTrigger),clearTimeout(this.resetAllTimeout),this.canvas.removeEventListener("touchstart",this.ignoreEvent),this.canvas.removeEventListener("touchmove",this.ignoreEvent),this.canvas.removeEventListener("touchend",this.ignoreEvent),this.canvas.removeEventListener("touchend",this.finishTouchEnd),this.canvas.removeEventListener("touchcancel",this.ignoreEvent),this.canvas.removeEventListener("touchcancel",this.finishTouchEnd),this.canvas.addEventListener("touchstart",this.newTouch),this.canvas.addEventListener("touchend",this.touchEnd),this.canvas.addEventListener("touchcancel",this.touchEnd)}draw(){this.ctx.clearRect(0,0,this.canvas.width,this.canvas.height);for(const t of this.touches)t.draw(this.ctx)}getTouch(t){for(const e of this.touches)if(t===e.id)return e;return null}resetTimerTrigger(){if(clearTimeout(this.timerTrigger),this.feature.shouldTimerStart(this.touchesLength(),this.selectedNumber)){this.timerTrigger=setTimeout(this.triggerSelection.bind(this),this.triggerTimeout);for(const t of this.touches)t.startTimer(this.lastUpdateTimestamp)}else for(const e of this.touches)e.startTimer(-1)}triggerSelection(){const o=t=>{let e=t.length,s,i;for(;0!==e;)s=Math.floor(Math.random()*e),i=t[--e],t[e]=t[s],t[s]=i;return t},e=()=>{const e=_.minBy(this.touches,t=>t.y);this.touches=this.touches.filter(t=>t.y!==e.y);var t=[...this.touches].map(t=>t.id);return o(t)};var t=i=>{const t=e();t.forEach((t,e)=>{if(e<i){const s=this.getTouch(t);s&&(s.isSelected=!0,s.state=1===i?s.touchState.onlySelected:s.touchState.selected)}else this.remove(t)})},s=t=>{var e=[...this.touches].map(t=>t.id);if(t>e.length)throw new RangeError("selectTeams: more elements taken than available");for(const i of((t,e)=>{var s=t.length;const i=[];let h=0;if(s%e==0)for(var r=Math.floor(s/e);h<s;)i.push(t.slice(h,h+=r));else for(;h<s;){var o=Math.ceil((s-h)/e--);i.push(t.slice(h,h+=o))}return i})(o(e),t)){var s=this.colours.getRandomColour();for(const h of i){const r=this.getTouch(h);r&&(r.colour=s,r.state=r.touchState.selected)}}},i=()=>{const t=e();t.forEach((t,e)=>{const s=this.getTouch(t);s&&(s.number=e+1,s.state=s.touchState.selected)})};switch(clearTimeout(this.timerTrigger),this.feature.type){case this.feature.featureType.select:t(this.selectedNumber);break;case this.feature.featureType.teams:s(this.selectedNumber);break;case this.feature.featureType.ordinate:i();break;default:throw new Error("Unrecognised feature type.")}this.vibrate&&window.navigator.vibrate([50,10,50]),this.canvas.removeEventListener("touchstart",this.newTouch),this.canvas.addEventListener("touchstart",this.ignoreEvent),this.canvas.removeEventListener("touchend",this.touchEnd),this.canvas.addEventListener("touchend",this.finishTouchEnd),this.canvas.removeEventListener("touchcancel",this.touchEnd),this.canvas.addEventListener("touchcancel",this.finishTouchEnd)}ignoreEvent(t){t.preventDefault()}handleNewTouch(t){t.preventDefault();for(const e of t.changedTouches)this.add(e.clientX,e.clientY,e.identifier);this.resetTimerTrigger()}handleTouchMove(t){t.preventDefault();for(const e of t.changedTouches)this.move(e.identifier,e.clientX,e.clientY)}handleTouchEnd(t){t.preventDefault();for(const e of t.changedTouches)this.remove(e.identifier);this.resetTimerTrigger()}handleFinishTouchEnd(t){t.preventDefault();for(const e of t.changedTouches){let t=this.getTouch(e.identifier);t&&(t.isLocked=!0)}this.areAllTouchesLocked()&&setTimeout(this.reset.bind(this),this.displayTimeout)}}
